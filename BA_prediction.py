# -*- coding: utf-8 -*-
"""Untitled16.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1a1xD9lcrZ4-CgG3Mwi95Ap3i3N3v-UGP
"""

# ---------- 1. Imports ----------
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# For machine learning
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.impute import SimpleImputer
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline

# ---------- 2. Load dataset ----------
df = pd.read_csv("/content/life-expectancy.csv")  # change path if needed
print("Shape:", df.shape)
print(df.head())

# ---------- 3. Define target and features ----------
target = 'Age'

# Categorical features (lifestyle and demographics)
cat_features = ['Gender','Physical_Activity','Smoking_Status','Alcohol_Consumption','Diet','Blood_Pressure']

# Numeric features (biomarkers and metrics)
num_features = ['Height','Weight','BMI','Cholesterol',
                'Diabetes','Hypertension','Heart_Disease','Asthma']

print("Categorical features:", cat_features)
print("Numeric features:", num_features)

# ---------- 4. Train-test split ----------
X = df[cat_features + num_features]
y = df[target]

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

print("Training size:", X_train.shape)
print("Test size:", X_test.shape)

# ---------- 5. Preprocessing ----------

# Numeric preprocessing: impute missing values (median) + scale features
numeric_transformer = Pipeline(steps=[
    ('imputer', SimpleImputer(strategy='median')),
    ('scaler', StandardScaler())
])

# Categorical preprocessing: one-hot encode categorical variables
categorical_transformer = Pipeline(steps=[
    ('imputer', SimpleImputer(strategy='most_frequent')),
    ('onehot', OneHotEncoder(handle_unknown='ignore'))
])

# Combine both transformers
preprocessor = ColumnTransformer(transformers=[
    ('num', numeric_transformer, num_features),
    ('cat', categorical_transformer, cat_features)
])

# ---------- 6. Build pipeline with model ----------
pipeline = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('model', RandomForestRegressor(n_estimators=200, random_state=42, n_jobs=-1))
])

# Train model
pipeline.fit(X_train, y_train)

# ---------- 7. Predict and evaluate ----------
y_pred = pipeline.predict(X_test)
mae = mean_absolute_error(y_test, y_pred)
print(f"Mean Absolute Error (MAE) on test set: {mae:.2f} years")

# Optional: scatter plot predicted vs actual
plt.figure(figsize=(5,5))
sns.scatterplot(x=y_test, y=y_pred, alpha=0.5)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--')
plt.xlabel("Actual Age")
plt.ylabel("Predicted Age")
plt.title("Predicted vs Actual Age")
plt.show()

# ---------- 8. Biological age & age acceleration ----------
# Predicted age = proxy biological age
df_test = X_test.copy()
df_test['Actual_Age'] = y_test
df_test['Predicted_Age'] = y_pred
df_test['Age_Accel'] = df_test['Predicted_Age'] - df_test['Actual_Age']

# Quick summary
print(df_test[['Actual_Age','Predicted_Age','Age_Accel']].describe())

# Plot Age Acceleration distribution
plt.figure(figsize=(5,3))
sns.histplot(df_test['Age_Accel'], kde=True, bins=30)
plt.title("Age Acceleration (Predicted Age - Actual Age)")
plt.show()

# ---------- 9. Feature importance ----------
# Only works for numeric after preprocessing, but RandomForest in pipeline has feature names via preprocessing
model = pipeline.named_steps['model']
preproc = pipeline.named_steps['preprocessor']

# Get numeric feature names after preprocessing
num_features_scaled = num_features
# Get categorical feature names after one-hot
cat_ohe_features = list(preproc.named_transformers_['cat']['onehot'].get_feature_names_out(cat_features))
all_features = num_features_scaled + cat_ohe_features

importances = pd.Series(model.feature_importances_, index=all_features).sort_values(ascending=False)
print("Top 15 important features for age prediction:")
print(importances.head(15))

# Optional plot
plt.figure(figsize=(6,6))
sns.barplot(x=importances.head(15).values, y=importances.head(15).index)
plt.title("Top 15 Features Predicting Age")
plt.show()